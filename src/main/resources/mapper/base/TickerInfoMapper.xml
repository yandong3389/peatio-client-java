<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.law.yuncoin.mapper.base.TickerInfoMapper" >
  <resultMap id="BaseResultMap" type="com.law.yuncoin.bean.base.TickerInfo" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="buy" property="buy" jdbcType="DECIMAL" />
    <result column="sell" property="sell" jdbcType="DECIMAL" />
    <result column="low" property="low" jdbcType="DECIMAL" />
    <result column="high" property="high" jdbcType="DECIMAL" />
    <result column="last" property="last" jdbcType="DECIMAL" />
    <result column="vol" property="vol" jdbcType="DECIMAL" />
    <result column="at" property="at" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, buy, sell, low, high, last, vol, at
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.law.yuncoin.bean.base.TickerInfoExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ticker_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="mysqlOffset != null and mysqlOffset>=0" >
      limit #{mysqlOffset} , #{mysqlLength}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from ticker_info
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from ticker_info
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.law.yuncoin.bean.base.TickerInfoExample" >
    delete from ticker_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.law.yuncoin.bean.base.TickerInfo" >
    insert into ticker_info (id, buy, sell, 
      low, high, last, vol, 
      at)
    values (#{id,jdbcType=INTEGER}, #{buy,jdbcType=DECIMAL}, #{sell,jdbcType=DECIMAL}, 
      #{low,jdbcType=DECIMAL}, #{high,jdbcType=DECIMAL}, #{last,jdbcType=DECIMAL}, #{vol,jdbcType=DECIMAL}, 
      #{at,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.law.yuncoin.bean.base.TickerInfo" >
    insert into ticker_info
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="buy != null" >
        buy,
      </if>
      <if test="sell != null" >
        sell,
      </if>
      <if test="low != null" >
        low,
      </if>
      <if test="high != null" >
        high,
      </if>
      <if test="last != null" >
        last,
      </if>
      <if test="vol != null" >
        vol,
      </if>
      <if test="at != null" >
        at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="buy != null" >
        #{buy,jdbcType=DECIMAL},
      </if>
      <if test="sell != null" >
        #{sell,jdbcType=DECIMAL},
      </if>
      <if test="low != null" >
        #{low,jdbcType=DECIMAL},
      </if>
      <if test="high != null" >
        #{high,jdbcType=DECIMAL},
      </if>
      <if test="last != null" >
        #{last,jdbcType=DECIMAL},
      </if>
      <if test="vol != null" >
        #{vol,jdbcType=DECIMAL},
      </if>
      <if test="at != null" >
        #{at,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.law.yuncoin.bean.base.TickerInfoExample" resultType="java.lang.Integer" >
    select count(*) from ticker_info
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update ticker_info
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.buy != null" >
        buy = #{record.buy,jdbcType=DECIMAL},
      </if>
      <if test="record.sell != null" >
        sell = #{record.sell,jdbcType=DECIMAL},
      </if>
      <if test="record.low != null" >
        low = #{record.low,jdbcType=DECIMAL},
      </if>
      <if test="record.high != null" >
        high = #{record.high,jdbcType=DECIMAL},
      </if>
      <if test="record.last != null" >
        last = #{record.last,jdbcType=DECIMAL},
      </if>
      <if test="record.vol != null" >
        vol = #{record.vol,jdbcType=DECIMAL},
      </if>
      <if test="record.at != null" >
        at = #{record.at,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update ticker_info
    set id = #{record.id,jdbcType=INTEGER},
      buy = #{record.buy,jdbcType=DECIMAL},
      sell = #{record.sell,jdbcType=DECIMAL},
      low = #{record.low,jdbcType=DECIMAL},
      high = #{record.high,jdbcType=DECIMAL},
      last = #{record.last,jdbcType=DECIMAL},
      vol = #{record.vol,jdbcType=DECIMAL},
      at = #{record.at,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.law.yuncoin.bean.base.TickerInfo" >
    update ticker_info
    <set >
      <if test="buy != null" >
        buy = #{buy,jdbcType=DECIMAL},
      </if>
      <if test="sell != null" >
        sell = #{sell,jdbcType=DECIMAL},
      </if>
      <if test="low != null" >
        low = #{low,jdbcType=DECIMAL},
      </if>
      <if test="high != null" >
        high = #{high,jdbcType=DECIMAL},
      </if>
      <if test="last != null" >
        last = #{last,jdbcType=DECIMAL},
      </if>
      <if test="vol != null" >
        vol = #{vol,jdbcType=DECIMAL},
      </if>
      <if test="at != null" >
        at = #{at,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.law.yuncoin.bean.base.TickerInfo" >
    update ticker_info
    set buy = #{buy,jdbcType=DECIMAL},
      sell = #{sell,jdbcType=DECIMAL},
      low = #{low,jdbcType=DECIMAL},
      high = #{high,jdbcType=DECIMAL},
      last = #{last,jdbcType=DECIMAL},
      vol = #{vol,jdbcType=DECIMAL},
      at = #{at,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>